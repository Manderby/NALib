
--------------------------
CHANGELOG Versions 21 - 30
--------------------------

This file contains information about changes in the package NALib. These are
purely informational and any information found here is not guaranteed to be
correct, complete or final.


Big changes:
- Added NAJSON, a non-standard-conform but very fast JSON parser.
- Windows GUI is now resolution independent.
- Images can be scaled arbitrariyly. Linear up and downscaling.
- Improved blending algorithms
- Reprogrammed NAButton.

Smaller things:
- Deprecating NABounds4, replacing with NABezel4
- Adding 3D orthographic projection matrix computation
- Adding setEnabled and setVisible to some UIElements
- Adding pixel font
- Adding NAFont
- Adding leap second information according to bulletin C 64 and 65
- Adding binary pair sum method.
- Rearranging GUI implementation files
- Fixing macOS windows not appearing upon start of application
- Tons of smaller corrections, improvements, etc.


Version 26 (released 8. January 2022)
==========

Big changes:
- Adding more tests
- Adding lots of GUI functionality. New NASlider NAMenu NAPopupButton
- Many improvemens in the background.

Smaller Things:
- Removed naSizeOf, removed NAUInt, replaced many NAInt with size_t
- Removed naNewStringWithUTF8CStringLiteral. Use naNewStringWithFormat.
- Adding naTestCrash to NATesting. Still buggy on macOS
- Updated HelloWorldGUI.
- Fixed a bug in QuadTree range detection.
- Adding leap second information according to bulletin C 61, 62 and 63



Version 25 (released 13. July 2020)
==========

Big changes:
- NALib is now published under Public Domain
- Starting from now, C99 is the minimum requirement for NALib to compile.
  Of course uses C11 whenever available.
- Lots of renaming of parameters to newer code style
- Added testing and benchmark
- NABase is fully tested
- Added int128 and int256

Smaller Things:
- Added NADateTime as Key
- Small Changes to the API names
- Removed NAMoney.h
- NAConfiguration now lost some entries due to switch to C99 but gained
  some new ones and some others were renamed.
- Moving to Visual Studio 2019. Project for VisualStudio 10 removed.
- Adapted documentation.txt
- Removed NASizeInt, now using size_t and ptrdiff_t
- Removed implementations for sign encodings different from twos complement.
- Got rid of all NA_PRI and NA_SCN. Provide naPri functions.
- Huge renaming of all helper symbols now with the na_ or NA_ prefix.
- Adding Leap second information according bulletin C 60



Version 24 (released 2020-Jan-09)
==========

- Adding GUI. For Mac and Windows. Yeah Baby!
- Adding NATranslator. Very easy localization.
- Adding NAPreferences. System dependent default values mapping
- Adding NABabyColor, NABabyImage

- Enabled ARC (automatic reference counting) on cocoa for mac for threading
  and ui.
- Added naPeekStack
- naTestFlag is now called naGetFlag
- fixing lots of warnings, static code analysis, and using cppcheck
- Switching to tag-based release cycles
- Reordering the files and folders into a more general purpose way.
- Adding Leap second information according bulletin C 58 and C 59



Version 23 (first published 2019-Jun-30)
==========

Highlights:
- Integrated NAQuadTree and NAOctTree into NATree. One tree to rule them all.
- Added template architecture. Very crude at the moment. Let's see where that
  takes us.
- Added NAKey. Main component for key values. Very crude at the moment.
- Reprogrammed NAHeap with a new template architecture.

Other things:
- Simplified NAPtr by removing the pointer argument of most functions.
- Splitting VectorAlgebra file into several files.
- Adding Leap second information according bulletin C 57
- Removed the functionsymbol parameter from naError and naCrash
- Extended NAList with naMoveListToLast and some debug checks
- Completed some NABuffer functions and fixed some bugs.
- Added CODATA 2018 physical constants. Warning: Macro names changed!



Version 22 (first published 2018-Dec-14)
==========

- Implemented NAOctTree the same way as NAQuadTree
- Added NATree, a binary search tree (for the time being).
- Huge Refactoring of NABuffer
- Rearranging large files into hierarchical folder structure.

- Tweaked QuadTree implementation. Removed naSetQuadTreeInRect. Use iterators
  for that. MinLeafExponent is now a BaseLeafExponent
- Made NAPointer independent of naRuntimeSystem. Thinking about killing this
  structure alltogether as it has only small purpose but still keeping it.
- Adding Leap Second information according Bulletin 56
- Cleaning up void returns and naCrashes
- Extended ValueHelpers for unsighed integers a little
- Moved naMakeXXXPositive to NACoord and NAArray. Added na_MakeRangeiAbsolute
  to NABuffer
- Renamed naMakeNullPtr to naMakePtrNull
- Made some of the runtime system functions inlineable.
- Altering Endianness functions. No more NAEndiannessConverter.
- Renaming all naNull functions to naZero
- Removing all warning preprocessor directives.



Version 21 (first published 2018-Mai-27)
==========

Highlights:
- Enhanced runtime system with Reference counting for naNew, naRetain and
  naRelease. Revisited whole NARuntime. Now no code sanity warnings.
- NAQuadTree is now storing coordinates in doubles and leaf sizes as exponents.
- Renaming of NASystem to NABase. Split-up of the file into a folder of files.
  Oldest file in the code collection grew constantly and desperately needed
  some structure.
- Huge refactoring concerning integer values. NAInt is not necessarily the same
  size as an address anymore.
- Created int64 emulation. It is possible now to compile and run the code
  without the long long datatype.
- Added Binary macros and functions for more control over floating point and
  integer values. Full potential not yet in use but prepared for the future.
- Moving to GitHub.

Other things:
- The Runtime system now always registers runtime types, not only in debug.
- Added NA_MEMORY_POOL_AGGRESSIVE_CLEANUP macro in NAConfiguration.h
- Removed NA_RUNTIME_USES_MEMORY_POOLS in NAConfiguration.h. Pools rule!
- Moved lots of implementation macros to II files.
- Some more debugging tests
- QuadTree and Octtree added childlength to "update" function callbacks. Also
  have new function to return rect or box of current iterator element and
  aligned coords
- Some float function names have changed the position of their f suffix.
- Enhanced Coord.h with some more double, float and int conversions.
- Enhanced and corrected many more NACoord functions
- Enhanced value helpers with some more conversions.
- Added NA_MEMORY_ALIGNED_MEM_MAC_OS_X macro to Configuration.h
- naCrash is now a macro. No more code analysis warnings.
- Removed all occurrencies of the old company in the code.
- Introcuding NASizeInt and NASizeUInt. Since NAInt does not necessarily has
  the same size as an address, we needed that.
- SYSTEM is only used for macros concerning the actual system compiled for.
  NA_OS defined the operating system, NA_CALENDAR defines the calendar system.
- Garbage collection now also can be aggressive or non-aggressive.
- Added naIterateListBack and naIterateListStep to List iteration.
- Added simplified List and QuadTree iteration with macros naBeginXXXIteration,
  and naEndXXXIteration.
- Reenabled encoding and decoding strings for EPS and XML.
- Cleaned up some h files.
- Changed configuration to use posix_memalign by default.
- Changed the license to the default MIT version.



Version 20 (first published 2018-Jan-13):
==============================================

This changelog file starts with NALib version 20.

A full changelog of version 20 and earlier versions are described in other
files. Here, only a recapitulation of the most important things of versions
10 to 20 is described:

In between versions 10 and 20, lots of refinements have been made, some APIs
have been simplified and many changes have been introduced. Most importantly,
the iterators have been reimplemented to a common form, the memory management
and runtime system became more powerful, faster and aware of garbage collection,
container structs became simpler yet more powerful, new containers have been
introduced, and a first UI implementation has been programmed.

-----------------------

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
