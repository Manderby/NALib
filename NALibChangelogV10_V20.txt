
This file is part of NALib, a collection of C and C++ source code
intended for didactical purposes. Full license notice at the bottom.


--------------------------
CHANGELOG Versions 10 - 20
--------------------------

This file contains information about changes in the package NALib. These are
purely informational and any information found here is not guaranteed to be
correct, complete or final.



todo: componentwise division Matrix. Division with E. Determinant

- Moved slow and helper functions of NAList.h to NAList.c
- Changed the C11 macro of NA_NULL to NULL.
- Added File access methode naAccess
- Renamed Scale and componentwise div functions in NAVectorAlgebra to MulComp
  and DivComp. Added componentwise multiplication and division of Matrices.
- Added Determinant computation and Matrix equality tests in NAVectorAlgebra.h
- Fixed some type conversion and equal pointer bugs in NAVectorAlgebra.h
- Fixed some erroneous checks in NAVectorAlgebra.h
- Added float versions of rotation matrix functions


Version 12 (first published 2015-August-30):
==============================================

- Complete reorganization of base memory structs: Three new structs are
  introduced: NACArray, NAMemoryBlock and NAPtr. The NAPtr is the same as
  NALValue before, NALValue is now something different. In total, there are
  now four structs which corresponds to four combinations of having a bytesize
  and typesize available per pointer or not. The NAPointer struct distinguishes
  between all of them. NAPointer now much bigger and stores flags separate from
  refcount.
- NAGrowingSpace now grows exponentially. Slight changes to API. Simplified
  whole implementation and made it inline again. NAGrowingSpace.c is removed.
- Greatly enhanced NAVectorAlgebra.h to have many more checks, E and S variants
  and more documentation. The API has beed changed for double-vectors and
  double-matrices. The now need the type ending d. Slightly changed semantics
  for naNormalize and naOrthogonalize and some matrix functions. Corrected Bug
  in naOrthonormalize.
- NAHeap now shrinks and grows automatically, if desired.
- Fully implemented NAPool.

- QuadTree and OctTree Allocators and Deallocators now have a userdata param.
  Warning: Not located at the last parameter!
- NAList now uses the runtime with NAListElement
- Added naGetHeapMaxCount
- Added naTransposeMXX functions for transposing matrices. Added RowFirst and
  ColumnFirst for Matrix filling
- Added naIsListEmpty
- Removed constructor and destructor from NAGrowingSpace. Removed
  naInitArrayWithGrowingSpace.
- NAPointer can now be constructed with either NAPtr, NALValue, NAMemoryBlock
  or NACArray.
- Added iteration functions for NAByteArray but commented it out later again.
- Added Array iteration for NAGrowingSpace
- Renamed NA_INVALID_INDEX to NA_INVALID_MEMORY_INDEX, added
  NA_INVALID_MEMORY_SIZE and moved them to NAMemory.h
- Added more checks in NAMemory.h
- Renamed naMakePositiveiInSize to naMakeIntegerRangePositiveInSize and
  moved it to NAMathOperators.h
- Improved documentation in some files
- Renamed the Changelog files to reflect the Versions contained.



Version 11 (first published 2015-August-16):
==============================================

Highlights:
- Added CODATA 2014 from NIST for physical constants
- Added Leap Second entry according to bulletin C 50
- Added third dimension to NACoord.h: NAVertex, NAVolume and NABox. Moved
  NARange to the same file. Consequently, generalizing some APIs.
- Greatly documented NAQuadTree and changed implementation to be non-redundant.
  Some API changes introduced.
- Added NAOctTree
- Renamed all naCpyXXX to naCopyXXX. Renamed all naSetXXX to naFillXXX which
  are not state machine functions.
- Changed all NAVecXXX and NAMatXXX parameters to their direct pointer
  equivalent. For example NAVec3f now is typed float*
- Added Quaternion 3D rotations in naFillM33WithRotationAlongAxis and
  naFillM33WithRotationAngles in NAVectorAlgebra.h

Other things:
- Added macro check for c++ standard keyword detection.
- Changed count value of NAList to NAUInt
- Added another macro check for va_copy
- Moved NAPointer to NARuntime.h, renamed NAPointer.h to NAMemory.h
- Added intersection functions to naCoord.h
- Added Iteration for naQuadTree and naOctTree. Removed obsolete GrowingSpace
  functions consequently. Iteration is way faster!
- Removed naFillRangeXXX, naInsideRange and naAlmostInsideRange functions.
- Removed NARectArea.h, NARectArea.c, NAMinMax.h, NAMinMax.c and NARange.h
  Consequently, moved some functions elsewhere or deleted them.
- NAByteMap.h and NAMap2D.h are not deleted yet. We'll see how these files
  turn out in the near future.
- Added NA_ZERO, NA_ONE, naIsIntStrictlyPositive, naIsIntZero, naIsIntNegative
- Macro check for Bytes being 8 bits wide moved to NASystem.h
- Changed NA_SYMBOL_VISIBLE and NA_SYMBOL_HIDDEN to NA_LINKER_EXPORT and
  NA_LINKER_NO_EXPORT
- Removed naNewPointerStruct. Moved code directly to the other constructors.
- Removed naGetPointerLValue.
- Replaced naNewPointerWithConstBuffer and naNewPointerWithMutableBuffer with
  naNewPointerWithLValue.
- Changed naFillLValueXXX functions to naMakeLValueXXX
- Added more C-standard macros and made many definitions dependent on that.
- Made some benchmarks and therefore added a custom pool size instead of
  relying on the memory page size. Added NA_POOL_SIZE_EQUALS_PAGESIZE and
  NA_CUSTOM_POOL_SIZE.
- Removed string encoding. NALib currently is only capable to handle UTF-8.
  It is just too much to rewrite all encodings from scratch. For now.
- Added naLog2i
- NAQuadTree now expands in 4 cycles such that a tree will always be the same
  no matter how he is constructed.
- naSeedRand now returns the seed created when using 0




Version 10 (first published 2015-July-1):
==============================================

This changelog file starts with NALib version 10.

A full changelog of version 10 and earlier versions are described in other
files. Here, only a recapitulation of the most important things of NALib is
described:

NALib is a source code collection provided with a very open license for
everyone to use. It is a pure C library which has been derived from a private
C++ library more than a decade in the making.

NALib provides code for various data formats and algorithms commonly used
every day in a software engineers work. It compiles with clang and gcc on
Mac OS X as well as with Visual-C on Windows. Other systems may or may not
be supported. The collection has been used to drive several commercial
applications on Mac and Windows.

During the first 10 version iterations, continuous improvements have been made
in order to simplify the API, add code safety, provide debugging helpers and
to enhance the collection. From the start, the documentation of NALib was
embedded withing the source files, mainly the header files. The documentation
is supposed to be didactical for people to understand what is going on in the
code and which API should be used under what circumstances.






-----------------------

Copyright (c) NALib, Tobias Stamm, Manderim GmbH

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the source-code.

In case the source-code of this software is inaccessible to the end-user,
the above copyright notice and this permission notice shall be included
in any source-code which is dependent on this software and is accessible
to the end-user.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
